GOHOSTOS := $(shell go env GOHOSTOS)
APP_NAME := $(notdir $(CURDIR))
VERSION=$(shell git describe --tags --always)

ifeq ($(GOHOSTOS), windows)
	#the `find.exe` is different from `find` in bash/shell.
	#to see https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/find.
	#changed to use git-bash.exe to run find cli or other cli friendly, caused of every developer has a Git.
	#Git_Bash= $(subst cmd\,bin\bash.exe,$(dir $(shell where git)))
	Git_Bash=$(subst \,/,$(subst cmd\,bin\bash.exe,$(dir $(shell where git))))
	INTERNAL_PROTO_FILES := $(shell $(Git_Bash) -c "find internal -name *.proto")
	API_PROTO_FILES=$(shell $(Git_Bash) -c "cd ../../api/$(APP_NAME) && find . -name *.proto")
else
	INTERNAL_PROTO_FILES := $(shell find internal -name *.proto)
	API_PROTO_FILES=$(shell cd ../../api/$(APP_NAME) && find . -name *.proto)
endif

.PHONY: config
# generate internal proto
config:
	protoc --proto_path=./internal --proto_path=../../third_party --go_out=paths=source_relative:./internal \
	       $(INTERNAL_PROTO_FILES)

.PHONY: api
# generate api proto
api:
	cd ../../api/$(APP_NAME) && mkdir -p ../../docs/$(APP_NAME) && protoc --proto_path=. \
	       --proto_path=../../third_party \
 	       --go_out=paths=source_relative:. \
 	       --go-http_out=paths=source_relative:. \
 	       --go-grpc_out=paths=source_relative:. \
	       --openapi_out=fq_schema_naming=true,default_response=false:../../docs/$(APP_NAME) \
	       $(API_PROTO_FILES)

.PHONY: wire
# generate internal wire-gen
wire:
	cd cmd/server && wire

print:
	@echo "$(APP_NAME)"

.PHONY: gorm_gen
# 生成gorm的gen
gorm_gen:
	cd internal/data/gen && go run generate.go -f ../../../configs/config.yaml

.PHONY: build
# build 非本地执行用于dockerfile
build:
	mkdir -p bin/ && go build -ldflags "-X main.Version=$(VERSION)" -o ./bin/ ./...

.PHONY: all
all: config api wire